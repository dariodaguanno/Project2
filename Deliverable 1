//
// Created by dario on 10/08/2022.
//
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <limits.h>
#include <stdbool.h>

#define MAXBUFF 1000

struct opts{
    bool background;
    bool redirection;
    bool truncate;
    bool append;
    char **args;
    int arglen;
};

//we need to reset the opts struct every time the last input is given
void optsReset(struct opts *input);
//readInput saves the line of text
char* readInput(void);
//parseInput checks for the different flags
int parseInput(struct opts *input, char *inputLine);
//execInput runs the certain command that is read
void execInput(struct opts *input);

void cd();
void dir();
void envir();
void echo();
void help();
void pauseprog();

int main(int argc, char *argv[]){
    //set run to true for interactive mode
    bool run = true;
    //user input struct
    struct opts input;
    //string to store the users input
    char *cmdInput;
    cmdInput = malloc(sizeof(char)*MAXBUFF);

    input.args = malloc(10*sizeof(char *));

    if(argc == 2){
        //batch mode
        printf("Batch mode\n");
        run = false;
    }
    else if(argc == 1){
        //just pass along
    }
    else{
        printf("Invalid input: too many arguments\n");
        exit(1);
    }
    //beginning of the while loop
    while(run){
        optsReset(&input);
        printf("myshell> ");
        cmdInput = readInput();
        parseInput(&input, cmdInput);
        execInput(&input);
    }
    return 1;
}

void optsReset(struct opts *input){
    input->redirection = false;
    input->truncate = false;
    input->append = false;
    input->args[0] = "\n";
    input->arglen = 0;
}

char* readInput(void){
    char *line = NULL;
    size_t bufferSize = 0;
    //this checks for an error while reading input
    if(getline(&line, &bufferSize, stdin) == -1){
        printf("Could not get line\n");
        exit(0);
    }
    //this removes the new line from when enter is pressed
    if(line[strlen(line) - 1] == '\n'){
        line[strlen(line) - 1] = ' ';
    }
    return line;
}

int parseInput(struct opts *input, char *inputLine){
    char *token;
    token = strtok(inputLine, " ");
    while(token != NULL){
        if(strcmp(token, "<") == 0){
            input->redirection = true;
            printf("Nice\n");
        }
        else if(strcmp(token, ">") == 0){

        }
        else if(strcmp(token, ">>") == 0){

        }
        else{
            input->args[input->arglen] = token;
            token = strtok(NULL, " ");
            input->arglen++;
            printf("We're getting here\n");
        }
    }
    printf("Your input is %s\n", inputLine);
    return 1;
}

void execInput(struct opts *input){
    char *command = input->args[0];

    if(strcmp(command, "quit") == 0){
        printf("Leaving myshell >:)\n");
        exit(1);
    }
    else if(strcmp(command, "clr") == 0){
        printf("\e[1;1H\e[2J");
    }
    else if(strcmp(command, "cd") == 0){

    }
    else if(strcmp(command, "dir") == 0){

    }
    else if(strcmp(command, "environ") == 0){

    }
    else if(strcmp(command, "echo") == 0){

    }
    else if(strcmp(command, "help") == 0){

    }
    else if(strcmp(command, "pause") == 0){

    }
    else{
        printf("Command not built in, tbd\n");
    }
}
